)
head(crime_data_jul_aug_sep)
get_coordinate_difference  = function(which_coordinate, absolute_value){ #here we name the function and assign function arguments
#1. we use placeholder "which_coordinate" to determine whether it's longitude or latitude), we'd want this argument to be called as a string
#2. we use the boolean placeholder absolute_value to set whether we want the non-negative absolute difference or the real value
#this is the function  body
ucl_lat = 51.525066 #we set the target location coordinates
ucl_long = -0.129779
if(which_coordinate == 'long'){ #here we use an if...else statement to check whether the function parameter which_coordinate is equal to 'long'
if(absolute_value == T){ #now we check whether the user specified the function parameter absolute_value as TRUE
output_variable = abs(ucl_long - crime_data_jul_aug_sep$longitude) #the abs() function returns the asbolute value
} else if(absolute_value == F){
output_variable = ucl_long - crime_data_jul_aug_sep$longitude
}
} else if(which_coordinate == 'lat'){
if(absolute_value == T){
output_variable = abs(ucl_lat - crime_data_jul_aug_sep$latitude)
} else if(absolute_value == F){
output_variable = ucl_lat - crime_data_jul_aug_sep$latitude
}
#note that we specified an output variable called output_variable
} else { #we use this to catch errors in the function specification
print('The function arguments are not valid, please check them!')
}
#We now want this function to return the output variable.
return(output_variable)
}
crime_data_jul_aug_sep$long_difference =  get_coordinate_difference(which_coordinate = 'long'
, absolute_value = T)
#we directly created a new variable and used our own function to return the longitude difference
head(crime_data_jul_aug_sep)
#create the variable (if not already done above)
crime_data_jul_aug_sep$lat_difference =  get_coordinate_difference(which_coordinate = 'lat'
, absolute_value = T)
head(crime_data_jul_aug_sep)
#create new variable that expresses the distance in metres
crime_data_jul_aug_sep$lat_in_m = crime_data_jul_aug_sep$lat_difference * 111111
head(crime_data_jul_aug_sep)
summary(crime_data_jul_aug_sep$lat_in_m)
#we can now use table() to see how many crimes happened within 200m (latitude)
table(crime_data_jul_aug_sep$lat_in_m < 200)
sub_selection = crime_data_jul_aug_sep[crime_data_jul_aug_sep$lat_in_m < 200, ] #first create a new data.frame with the crimes that are closer than 200m
sub_selection = sub_selection[1:200, ] # select only the first 200 rows
dim(sub_selection)
head(sub_selection)
#we can also exclude the NA (not available) cases in R where data are missing
sub_selection = na.omit(sub_selection)
dim(sub_selection)
for(every_crime in 1:nrow(sub_selection)){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in sub_selection){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in sub_selection){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(every_crime)
#print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in 1:nrow(sub_selection)){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(every_crime)
#print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in 1:nrow(sub_selection)){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(sub_selection$crime.type[every_crime])
#print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in 1:nrow(sub_selection)){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(paste(sub_selection$crime.type[every_crime], "-->", sub_selection$lat_in_m[every_crime], sep=" "))
#print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in 1:nrow(sub_selection)){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(paste(sub_selection$crime.type[every_crime], "-->", round(sub_selection$lat_in_m[every_crime], 2), sep=" "))
#print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
for(every_crime in 1:nrow(sub_selection)){ #here we have to state the scope of "every_crime". In this case, we want the code to test all crimes that we have in the data.
#Note that the placeholder "every_crime" can be replaced with anything you want; a common choice is "i"
#we can print to the screen by pasting elements together:
#check: ?paste
print(paste(sub_selection$crime.type[every_crime], "-->", round(sub_selection$lat_in_m[every_crime], 2), "metres", sep=" "))
#print(paste("Found close crime: ", sub_selection$crime.type[every_crime], " in ", sub_selection$lat_in_m, " metres", sep=""))
}
load('/Users/bennettkleinberg/Dropbox/cfc_comparison/data_cfc_comparison_full.RData')
names(dt.data)
library(data.table)
dt.data = setDT(dt.data)
dt.data
names(dt.data)
dt.data = dt.data[landing_url = 'https://www.youtube.com/user/yiannopoulosm/videos',]
dt.data = dt.data[landing_url == 'https://www.youtube.com/user/yiannopoulosm/videos',]
dt.data
names(dt.data)
vlogs_data = dt.data[, c(11:13)]
vlogs_data
vlogs_data = as.data.frame(vlogs_data)
head(vlogs_data)
save(vlogs_data
, file='/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/vlogs_data/vlogs_data.RData')
load('/Users/bennettkleinberg/Dropbox/cfc_comparison/data_cfc_comparison_full.RData')
library(data.table)
dt.data = setDT(dt.data)
levels(dt.data$landing_url)
table(dt.data$landing_url)
dt.data = dt.data[landing_url == 'https://www.youtube.com/user/yiannopoulosm/videos' | landing_url == 'https://www.youtube.com/user/caseyneistat/videos',]
vlogs_data = dt.data[, c(11:13)]
vlogs_data = as.data.frame(vlogs_data)
dim(vlogs_data)
load('/Users/bennettkleinberg/Dropbox/cfc_comparison/data_cfc_comparison_full.RData')
names(dt.data)
dt.data = setDT(dt.data)
dt.data = dt.data[landing_url == 'https://www.youtube.com/user/yiannopoulosm/videos' | landing_url == 'https://www.youtube.com/user/caseyneistat/videos',]
dt.data
names(dt.data)
vlogs_data = dt.data[, c(5, 11:13)]
vlogs_data = as.data.frame(vlogs_data)
dim(vlogs_data)
save(vlogs_data
, file='/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/vlogs_data/vlogs_data.RData')
load('./data/tutorial1/vlogs_data/vlogs_data.RData')
head(vlogs_data)
dim(vlogs_data)
load('/Users/bennettkleinberg/Dropbox/cfc_comparison/data_cfc_comparison_full.RData')
names(dt.data)
library(data.table)
dt.data = setDT(dt.data)
table(dt.data$landing_url)
dt.data = dt.data[landing_url == 'https://www.youtube.com/user/yiannopoulosm/videos' | landing_url == 'https://www.youtube.com/user/caseyneistat/videos',]
vlogs_data = dt.data[, c(5, 11:13)]
vlogs_data$date_posted = as.character(vlogs_data$date_posted)
vlogs_data
vlogs_data = as.data.frame(vlogs_data)
save(vlogs_data
, file='/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/vlogs_data/vlogs_data.RData')
load('./data/tutorial1/vlogs_data/vlogs_data.RData')
head(vlogs_data)
dim(vlogs_data)
#2: calculate the difference between the `data_posted` column and the reference date
#Let's creata a variable with the reference date as a "Date" variable in R
reference_date = as.Date('2018-11-30')
#Let's create a new variable: days_until_reference
vlogs_data$days_until_reference = as.numeric(reference_date - vlogs_data$date_posted)
vlogs_data$date_posted = as.Date(vlogs_data$date_posted)
vlogs_data$days_until_reference = as.numeric(reference_date - vlogs_data$date_posted)
head(vlogs_data)
#3. correct the view count
vlogs_data$view_count_corrected = vlogs_data$view_count/vlogs_data$days_until_reference
head(vlogs_data)
a = c('\n\t\tSHAYKH AMINULLAH\n\t\t'
, '\t\>-\tFAKER BEN ABDELAZZIZ BOUSSORA\n\t\t'
, '>>--ABDULLAH AL-RIMI\~..?\t\t'
, '\t~~>><{IBRAHIM SALIH MOHAMMED AL-YACOUB\&&%@#$'
, '\n\t\tRAMADAN ABDULLAH MOHAMMAD SHALLAH'
)
a = c('>>>SHAYKH AMINULLAH<>'
, '??!...~FAKER BEN ABDELAZZIZ BOUSSORA>><'
, '>>--ABDULLAH AL-RIMI~..?'
, '~~>><{IBRAHIM SALIH MOHAMMED AL-YACOUB&&%@#$'
, '<RAMADAN ABDULLAH MOHAMMAD SHALLAH>'
)
text_data = data.frame('original' = a)
text_data
)
a = c('>>>SHAYKH AMINULLAH<>'
, '??!...~FAKER BEN ABDELAZZIZ BOUSSORA>><'
, '>>--ABDULLAH AL-RIMI~..?'
, '~~>><{IBRAHIM SALIH MOHAMMED AL-YACOUB&&%@#$'
, '<RAMADAN ABDULLAH MOHAMMAD SHALLAH>'
)
text_data = data.frame('original_string' = a)
gsub('[><?!-~.?&%@#$]', '', text_data$original_string)
gsub('><?!-~.?&%@#$', '', text_data$original_string)
str_replace_all(text_data$original_string, "([><?!-~.?&%@#$])", "")
library(stringr)
str_replace_all(text_data$original_string, "([><?!-~.?&%@#$])", "")
str_replace_all(text_data$original_string, "(><?!-~.?&%@#$)", "")
str_replace_all(text_data$original_string, ">", "")
a = c('>>>SHAYKH AMINULLAH<>'
, '>>FAKER BEN ABDELAZZIZ BOUSSORA>><'
, '>>ABDULLAH AL-RIMI><<><>'
, '>><IBRAHIM SALIH MOHAMMED AL-YACOUB>><><<>'
, '<RAMADAN ABDULLAH MOHAMMAD SHALLAH>'
)
text_data = data.frame('original_string' = a)
gsub('[><]', '', text_data$original_string)
str_replace_all(text_data$original_string, "[><]", "")
text_data$cleaned_string = str_replace_all(text_data$original_string, "[><]", "")
text_data
write.csv(a
, file = "/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/messy_text/messy_text_data.csv"
, col.names = T)
write.csv(text_data
, file = "/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/messy_text/messy_text_data.csv"
, col.names = T)
text_data = read.csv('./data/tutorial1/messy_text/messy_text_data.csv'
, header=T)
text_data
text_data$cleaned_string_check = str_replace_all(text_data$original_string, "[><]", "")
identical(text_data$cleaned_string, text_data$cleaned_string_check)
text_data
is.equal(text_data$cleaned_string, text_data$cleaned_string_check)
text_data$cleaned_string == text_data$cleaned_string_check
dt.data
names(dt.data)
vlogs_with_text = dt.data[, c(1,2,11)]
save(vlogs_with_text
, file='/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/vlogs_data_2/vlogs_data_with_text.RData')
vlogs_with_text = dt.data[c(1:50, 1400:1450), c(1,2,11)]
save(vlogs_with_text
, file='/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/vlogs_data_2/vlogs_data_with_text.RData')
setwd('/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/vlogs_data_2')
lapply(seq(nrow(vlogs_with_text)), function(i){
write.table(vlogs_with_text$text[i],
file = vlogs_with_text$channel_vlog_id,
)
})
lapply(seq(nrow(vlogs_with_text)), function(i){
write.table(vlogs_with_text$text[i],
file = vlogs_with_text$channel_vlog_id[i],
)
})
lapply(seq(nrow(vlogs_with_text)), function(i){
write.table(vlogs_with_text$text[i]
, file = vlogs_with_text$channel_vlog_id[i]
, col.names = F
, append = F
)
})
lapply(seq(nrow(vlogs_with_text)), function(i){
write.table(vlogs_with_text$text[i]
, file = vlogs_with_text$channel_vlog_id[i]
, col.names = FALSE
, row.names = FALSE
, append=F
)
})
#1. load the data
load('./data/tutorial1/vlogs_data_2/vlogs_data_with_text.RData')
write.table(vlogs_with_text$text[10]
, file = vlogs_with_text$channel_vlog_id[10]
, col.names = FALSE
, row.names = FALSE
, append=F
)
crime_data = data.frame('city' = LETTERS[1:10])
crime_data
crime_data$size = sample(100000:1000000, 10, replace=F)
crime_data$size
crime_data$burglaries = sample(1000:10000, 10, replace=F)
crime_data$violentcrimes = sample(500:5000, 10, replace=F)
crime_data
write.table(crime_data
, file = "/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/wide_data/crime_data.txt"
, col.names = T
, row.names = F)
write.table(crime_data
, file = "/Users/bennettkleinberg/Dropbox/teaching/ucl/aca/tutorials/data/tutorial1/wide_data/crime_data.txt"
, col.names = T
, row.names = F)
library(tidyr)
crime_data_long = gather(data = crime_data
, key = crime_type
, value = count
, burglaries:violentcrimes
, factor_key=TRUE
)
crime_data_long
crime_data = read.table('./data/tutorial1/wide_data/crime_data.txt'
, header=T)
crime_data
library(tidyr)
crime_data_long = gather(data = crime_data
, key = crime_type
, value = count
, burglaries:violentcrimes
, factor_key=TRUE
)
crime_data_long
install.packages("crimedata")
library(crimedata)
crime_data = get_crime_data(years = 2016:2017
, cities = c("Las Vegas", "Los Angeles"))
crime_data = get_crime_data(years = 2016:2017
, cities = c("New York", "Los Angeles"))
crime_data
us_mass_shootings = read.csv(file = './data/tutorial1/USMassShootings.csv'
, header = T)
head(us_mass_shootings)
mean(us_mass_shootings$FATALITIES)
#frequency counts of the types of weapon
table(us_mass_shootings$TYPEOFWEAPONS)
#frequency counts of the types of weapon
table(us_mass_shootings$GENDER)
#variance
var(us_mass_shootings$FATALITIES)
#standard deviation of casualties
sd(us_mass_shootings$FATALITIES)
#range
range(us_mass_shootings$FATALITIES)
#frequency counts of gender by race
table(us_mass_shootings$GENDER, us_mass_shootings$RACE)
us_mass_shootings$PRIORSIGNSOFMENTALILLNESS
t.test(us_mass_shootings$FATALITIES ~ us_mass_shootings$PRIORSIGNSOFMENTALILLNESS)
#let's look at the counts of
table(us_mass_shootings$WEAPONSOBTAINEDLEGALLY, us_mass_shootings$STATE)
#let's look at the counts of
table(us_mass_shootings$WEAPONSOBTAINEDLEGALLY, us_mass_shootings$SHOOTINGTYPE)
#let's look at the counts of
table(us_mass_shootings$WEAPONSOBTAINEDLEGALLY, us_mass_shootings$GENDER)
#let's look at the counts of
table(us_mass_shootings$WEAPONSOBTAINEDLEGALLY, us_mass_shootings$PRIORSIGNSOFMENTALILLNESS)
cor(us_mass_shootings$FATALITIES, us_mass_shootings$WOUNDED)
cor.test(us_mass_shootings$FATALITIES, us_mass_shootings$WOUNDED)
plot(us_mass_shootings$FATALITIES, us_mass_shootings$WOUNDED)
plot(us_mass_shootings$FATALITIES, us_mass_shootings$WOUNDED)
t.test(us_mass_shootings$FATALITIES ~ us_mass_shootings$PRIORSIGNSOFMENTALILLNESS)
t.test(x = us_mass_shootings$FATALITIES
, y = us_mass_shootings$PRIORSIGNSOFMENTALILLNESS
)
us_mass_shootings$FATALITIES
us_mass_shootings$PRIORSIGNSOFMENTALILLNESS
?t.test
#let's look at the counts of
table(us_mass_shootings$WEAPONSOBTAINEDLEGALLY, us_mass_shootings$PRIORSIGNSOFMENTALILLNESS)
table(us_mass_shootings$WEAPONSOBTAINEDLEGALLY, us_mass_shootings$PRIORSIGNSOFMENTALILLNESS
, dnn = c('WEAPONSOBTAINEDLEGALLY', 'PRIORSIGNSOFMENTALILLNESS'))
levels(us_mass_shootings$WEAPONSOBTAINEDLEGALLY)
us_mass_shootings_clean = us_mass_shootings[us_mass_shootings$WEAPONSOBTAINEDLEGALLY == 'yes' | us_mass_shootings$WEAPONSOBTAINEDLEGALLY == 'no', ]
us_mass_shootings_clean = droplevels(us_mass_shootings_clean)
#check again:
levels(us_mass_shootings$WEAPONSOBTAINEDLEGALLY)
#check again:
levels(us_mass_shootings_clean$WEAPONSOBTAINEDLEGALLY)
us_mass_shootings_clean$WEAPONSOBTAINEDLEGALLY
us_mass_shootings_clean = us_mass_shootings[us_mass_shootings$WEAPONSOBTAINEDLEGALLY == 'Yes' | us_mass_shootings$WEAPONSOBTAINEDLEGALLY == 'No', ]
us_mass_shootings_clean = droplevels(us_mass_shootings_clean)
#check again:
levels(us_mass_shootings_clean$WEAPONSOBTAINEDLEGALLY)
table(us_mass_shootings_clean$WEAPONSOBTAINEDLEGALLY, us_mass_shootings_clean$PRIORSIGNSOFMENTALILLNESS
, dnn = c('WEAPONSOBTAINEDLEGALLY', 'PRIORSIGNSOFMENTALILLNESS'))
freq_table = table(us_mass_shootings_clean$WEAPONSOBTAINEDLEGALLY, us_mass_shootings_clean$PRIORSIGNSOFMENTALILLNESS
, dnn = c('WEAPONSOBTAINEDLEGALLY', 'PRIORSIGNSOFMENTALILLNESS'))
chisq.test(freq_table)
?cor.test
#type+run your code here
table(us_mass_shootings$WHEREWEAPONOBTAINED)
#type+run your code here
table(us_mass_shootings$NUMWEAPONS)
#type+run your code here
us_mass_shootings$YEAR
#type+run your code here
table(us_mass_shootings$GENDER, us_mass_shootings$RACE, us_mass_shootings$year)
us_mass_shootings$year
#type+run your code here
table(us_mass_shootings$GENDER, us_mass_shootings$RACE, us_mass_shootings$YEAR)
#type+run your code here
table(us_mass_shootings$YEAR, us_mass_shootings$RACE, us_mass_shootings$GENDER)
knit_with_parameters('~/GitHub/ucl_aca_20182019/slides/aca_20182019_lecture1_intro.Rmd')
?tapply
tapply(X = us_mass_shootings$WOUNDED
, INDEX = us_mass_shootings$GENDER
, FUN = mean
)
head(us_mass_shootings)
cor.test(us_mass_shootings$NUMWEAPONS, us_mass_shootings$TOTALVICTIMS)
cor.test(us_mass_shootings$NUMWEAPONS, us_mass_shootings$TOTALVICTIMS, conf.level = .99)
dim(crimtab)
summary(crimtab)
head(crimtab)
head(crime_data)
crime_data = data.frame('id' = 1:1000)
crime_data
crime_data$victim_gender = sample(c('female', 'male'), 1000, replace=T, prob = c(.35, .65))
crime_data
crime_data$victim_age = sample(12:96, 1000, replace=T)
crime_data
#Look at the data
head(us_mass_shootings)
mean(us_mass_shootings$FATALITIES)
#standard deviation of casualties
sd(us_mass_shootings$FATALITIES)
#variance
var(us_mass_shootings$FATALITIES)
#range
range(us_mass_shootings$FATALITIES)
#frequency counts of the shooters' gender
table(us_mass_shootings$GENDER)
#frequency counts of gender by race
table(us_mass_shootings$GENDER, us_mass_shootings$RACE)
my_model = lm(formula = TOTALVICTIMS ~ NUMWEAPONS
, data = us_mass_shootings)
my_model
#the full model and its parameters
my_model
10.683 + 2.087*3
10.683 + 2.087*3
my_model$fitted.values
my_model$model
summary(my_model)
#residuals
my_model$residuals
my_model$fitted.values
my_model$fitted.values[1]
my_model$residuals[1]
my_model$fitted.values[1] + my_model$residuals[1]
#checked against the actual data
my_model$model[1, ]
#model statistics
summary(my_model)
my_model_2 = lm(formula = TOTALVICTIMS ~ NUMWEAPONS + PRIORSIGNSOFMENTALILLNESS
, data = us_mass_shootings)
summary(my_model_2)
us_mass_shootings$LOCATIONTYPE
us_mass_shootings$WEAPONSOBTAINEDLEGALLY
my_glm = glm(formula = TOTALVICTIMS ~ NUMWEAPONS
, data = us_mass_shootings
, family = gaussian)
my_glm
my_glm
#residuals
my_glm$residuals
#fitted values
my_glm$fitted.values
#model statistics
summary(my_glm)
glm(formula = TOTALVICTIMS ~ NUMWEAPONS
, data = us_mass_shootings
, family = poisson)
exp(0.1143)
exp(2.458)
sum(my_model$residuals^2)
sum(my_model_2$residuals^2)
sum(my_model_2$residuals)
sum(my_model$residuals)
setwd('/Users/bennettkleinberg/GitHub/ucl_psm2_20182019/tutorials/data/tutorial2/stop_and_search/ec27f1edb581602b93a4ef58174f698aeb876d3b')
all_files = list.files(path = './')
all_files
all_files = list.files(path = './'
, recursive = T
, pattern = '*.csv')
all_files
stop_and_search_20172018 = do.call(what = rbind
, args = lapply(X = all_files
, FUN = function(x){
read.csv(x
, header = T
)
}
)
)
head(stop_and_search_20172018)
save(stop_and_search_20172018
, file = 'stop_and_search_met_20172018.RData')
a*b
a = 20
b = 30
a*b
?list.files
all_files = list.files(path = './data/tutorial1/police_data')
all_files
a = lapply(X = all_files
, FUN = function(x){
read.csv(x
, header = T
)
}
)
all_files = list.files(path = './data/tutorial1/police_data'
, full.names = T)
all_files
a = lapply(X = all_files
, FUN = function(x){
read.csv(x
, header = T
)
}
)
dim(a)
class(a)
big_data_frame = do.call(what = rbind
, args = lapply(X = all_files
, FUN = function(x){
read.csv(x
, header = T
)
}
)
)
head(big_data_frame)
dim(big_data_frame)
library(data.table)
big_data_frame_2 = rbindlist(a)
dim(big_data_frame_2)
