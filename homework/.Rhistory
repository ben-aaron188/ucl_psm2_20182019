data1_week5 = data.frame(deprivation_rank = sample(1:10, 1000, replace = T))
data1_week5
sample(c(-2:2), 1000, replace=T)
data1_week5$cleanliness_rank = data1_week5$deprivation_rank + sample(c(-2:2), 1000, replace=T)
data1_week5
data1_week5$cleanliness_rank[data1_week5$cleanliness_rank > 10] = 10
data1_week5$cleanliness_rank
data1_week5$cleanliness_rank[data1_week5$cleanliness_rank < 1] = 1
data1_week5$cleanliness_rank
cor(data1_week5$deprivation_rank)
cor(data1_week5$deprivation_rank, data1_week5$cleanliness_rank)
cor(data1_week5$deprivation_rank, data1_week5$cleanliness_rank, method = 'spearman')
data1_week5$socialmedia_rank = sample(1:5, 1000, replace = T)
cor(data1_week5$deprivation_rank, data1_week5$socialmedia_rank, method = 'spearman')
cor(data1_week5$cleanliness_rank, data1_week5$socialmedia_rank, method = 'spearman')
shapiro.test(data1_week5$deprivation_rank)
shapiro.test(data1_week5$cleanliness_rank)
shapiro.test(data1_week5$socialmedia_rank)
hist(data1_week5$deprivation_rank)
hist(data1_week5$cleanliness_rank)
hist(data1_week5$socialmedia_rank)
write.csv(data1_week5, file='/Users/bennettkleinberg/GitHub/ucl_psm2_20182019/homework/data/data1_week5.csv', header=T)
#loading the data
data1_week5 = read.csv('./data/data1_week5.csv', header=T)
write.csv(data1_week5, file='/Users/bennettkleinberg/GitHub/ucl_psm2_20182019/homework/data/data1_week5.csv')
#loading the data
data1_week5 = read.csv('./data/data1_week5.csv', header=T)
data2_week5 = data.frame(brothers = rpois(1000, 1))
data2_week5
data2_week5 = data.frame(brothers = rpois(1000, 1)
, police_contact = sample(c('Y', 'N'), 1000, replace=T, prob = c(.3, .7)))
data2_week5
write.csv(data2_week5, file='/Users/bennettkleinberg/GitHub/ucl_psm2_20182019/homework/data/data2_week5.csv')
#reading the data
data2_week5 = read.csv('./data/data2_week5.csv', header=T)
data2_week5
#assessing normality through histogram
hist(data2_week5$brothers)
#assessing normality statistically
shapiro.test(data2_week5$brothers)
#equality of variance
car::levene.test(data2_week5$brothers)
#equality of variance
car::leveneTest(data2_week5$brothers)
#equality of variance
car::leveneTest(data2_week5$brothers, data2_week5$police_contact)
#non-parametric test
wilcox.test(data2_week5$brothers, data2_week5$police_contact)
to.numeric(data2_week5$police_contact)
as.numeric(data2_week5$police_contact)
#non-parametric test
##transform to numeric
data2_week5$police_contact_num = as.numeric(data2_week5$police_contact)
wilcox.test(data2_week5$brothers, data2_week5$police_contact_num)
##take a look at the means
tapply(data2_week5$brothers, data2_week5$police_contact, mean)
data3_week5 = data.frame(casualties = rpois(600, 3)
, police_contact = rep(c('zebra-crossing', 'traffic-light', 'none'), each=200)
data3_week5
data3_week5 = data.frame(casualties = rpois(600, 3)
, police_contact = rep(c('zebra-crossing', 'traffic-light', 'none'), each=200))
data3_week5
write.csv(data3_week5, file='/Users/bennettkleinberg/GitHub/ucl_psm2_20182019/homework/data/data3_week5.csv')
data3_week5 = data.frame(casualties = rpois(600, 3)
, crossing_type = rep(c('zebra-crossing', 'traffic-light', 'none'), each=200))
write.csv(data3_week5, file='/Users/bennettkleinberg/GitHub/ucl_psm2_20182019/homework/data/data3_week5.csv')
#reading the data
data3_week5 = read.csv('./data/data3_week5.csv', header=T)
#look at the data
summary(data3_week5)
#assessing normality through histogram
hist(data3_week5$casualties)
#assessing normality statistically
shapiro.test(data3_week5$casualties)
#non-parametric test
##transform to numeric
data3_week5$crossing_type = as.factor(data3_week5$crossing_type)
levels(data3_week5$crossing_type)
data3_week5 = read.csv('./data/data3_week5.csv', header=T)
#look at the data
summary(data3_week5)
#assessing normality through histogram
hist(data3_week5$casualties)
#assessing normality statistically
shapiro.test(data3_week5$casualties)
#non-parametric test
##transform to numeric
data3_week5$crossing_type_num = as.factor(data3_week5$crossing_type)
levels(data3_week5$crossing_type_num)
levels(data3_week5$crossing_type_num) = c(0,1,2)
as.numeric(data3_week5$crossing_type_num)
as.numeric(as.character(data3_week5$crossing_type_num))
data3_week5$crossing_type_num = as.numeric(as.character(data3_week5$crossing_type_num))
#non-parametric test
##take a look at the means
tapply(data3_week5$casualties, data3_week5$crossing_type, mean)
wilcox.test(data3_week5$casualties, data3_week5$crossing_type)
wilcox.test(data3_week5$casualties, data3_week5$crossing_type_num)
kruskal.test(data3_week5$casualties, data3_week5$crossing_type_num)
flight_data = array(c(300, 200, 250, 250), dim=c(2,2))
dimnames(flight_data) = list( c('Drunk', 'Not drunk')
, c('Denied boarding', 'Allowed boarding'))
flight_data
flight_data = array(c(100, 50, 150, 500), dim=c(2,2))
dimnames(flight_data) = list( c('Drunk', 'Not drunk')
, c('Denied boarding', 'Allowed boarding'))
flight_data
flight_data = addmargins(flight_data, c(1,2))
flight_data
E_1_1 = (250*150)/800
E_1_2 = (250*650)/800
E_2_1 = (550*150)/800
E_2_2 = (550*650)/800
#compare expected values
chisq.test(flight_data)$expected
E_1_1
E_1_2
E_2_1
E_2_2
#compare expected values
chisq.test(flight_data)$expected
E_1_1 = (250*150)/800
E_1_2 = (250*650)/800
E_2_1 = (550*150)/800
E_2_2 = (550*650)/800
expected_vals = c(E_1_1, E_1_2, E_2_1, E_2_2)
#place the observed values in same structure
O_1_1 = 100
O_1_2 = 150
O_2_1 = 50
O_2_2 = 500
observed_vals = c(O_1_1, O_1_2, O_2_1, O_2_2)
((expected_vals = observed_vals)^2)/expected_vals
expected_vals = observed_vals
expected_vals = observed_vals
E_1_1 = (250*150)/800
E_1_2 = (250*650)/800
E_2_1 = (550*150)/800
E_2_2 = (550*650)/800
expected_vals = c(E_1_1, E_1_2, E_2_1, E_2_2)
#place the observed values in same structure
O_1_1 = 100
O_1_2 = 150
O_2_1 = 50
O_2_2 = 500
observed_vals = c(O_1_1, O_1_2, O_2_1, O_2_2)
#calculate ChiSquare
manual_chisquare = ((expected_vals - observed_vals)^2)/expected_vals
manual_chisquare
#calculate ChiSquare
manual_chisquare = sum(((expected_vals - observed_vals)^2)/expected_vals)
manual_chisquare
#compare chisquare value
chisq.test(flight_data)
#retrieve z-scores (std residuals)
chisq.test(flight_data)$stdres
flight_delays = array(c(1:16), dim=c(4,4))
dimnames(flight_delays) = list( c('On time', 'Minor delay', 'Severe delay', 'Cancelled')
, c('Spring', 'Summer', 'Fall', 'Winter'))
flight_delays = addmargins(flight_delays, c(1,2))
flight_delays
flight_delays = array(c(3000, 3500, 2000, 1500, 6000, 3000, 2000, 1000, 4000, 1000, 500, 500, 3000, 2500, 2000, 2000), dim=c(4,4))
dimnames(flight_delays) = list( c('On time', 'Minor delay', 'Severe delay', 'Cancelled')
, c('Spring', 'Summer', 'Fall', 'Winter'))
flight_delays = addmargins(flight_delays, c(1,2))
flight_delays
#calculate Chisquare test
chisquare_flight_delays = chisq.test(flight_delays, correct = F)
chisquare_flight_delays
#follow up with standardised residuals
chisquare_flight_delays$stdres
flight_delays = array(c(300, 350, 200, 150, 600, 300, 200, 100, 400, 100, 50, 50, 300, 250, 200, 200), dim=c(4,4))
dimnames(flight_delays) = list( c('On time', 'Minor delay', 'Severe delay', 'Cancelled')
, c('Spring', 'Summer', 'Fall', 'Winter'))
flight_delays = addmargins(flight_delays, c(1,2))
flight_delays
#calculate Chisquare test
chisquare_flight_delays = chisq.test(flight_delays, correct = F)
#follow up with standardised residuals
chisquare_flight_delays$stdres
chisquare_flight_delays
airport_data = array(c(1:8), dim=c(2,2,2))
dimnames(airport_data) = list('allowed_entry' = c('yes', 'no')
, 'zone' = c('EU', 'nonEU')
, 'customs_check' = c('yes', 'no')
)
airport_data
dimnames(airport_data) = list('additional_checks' = c('yes', 'no')
, 'zone' = c('EU', 'nonEU')
, 'customs_check' = c('yes', 'no')
)
airport_data
airport_data = array(c(1000, 500, 4000, 5000, 8000, 1000, 6000, 4000), dim=c(2,2,2))
dimnames(airport_data) = list('additional_checks' = c('yes', 'no')
, 'zone' = c('EU', 'nonEU')
, 'customs_check' = c('yes', 'no')
)
airport_data
airport_data_long = as.data.frame(as.table(airport_data))
airport_data_long
indep_model = glm(formula = Freq ~ zone + customs_check + additional_checks
, data = airport_data_long
, family = poisson)
#assess model
summary(indep_model)
#test whether we can reject the H0 of model adequacy
pchisq(7909.5, 4, lower.tail = F)
cbind(indep_model$data, round(fitted(indep_model))
cbind(indep_model$data, round(fitted(indep_model)))
cbind(indep_model$data, round(fitted(indep_model)))
saturated_model = glm(formula = Freq ~ zone*customs_check*additional_checks
, data = airport_data_long
, family = poisson)
saturated_model = glm(formula = Freq ~ zone*customs_check*additional_checks
, data = airport_data_long
, family = poisson)
cbind(saturated_model$data, round(fitted(saturated_model)))
two_way_model = glm(formula = Freq ~ zone + customs_check + additional_checks + zone:customs_check + zone:additional_checks + customs_check:additional_checks
, data = airport_data_long
, family = poisson)
#assess model
summary(two_way_model)
#test for H0
pchisq(111.82, 1, lower.tail = F)
#using step
step(saturated_model)
